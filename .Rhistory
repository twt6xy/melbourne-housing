1-pnorm(.7217)
qt(0.97,48)
qt(.93,81)
qt(0.87,149)
x <- 3.2
n <- 100
s <- 0.2
a <- 1-0.97
df <- 100-1
right <- x + qt(1-a/2, df)*s/sqrt(n)
left <- x - qt(1-a/2, df)*s/sqrt(n)
qt(1-a/2, df)*s/sqrt(n)
qt(1-a/2, df)*s/sqrt(n)
setwd("~/MSDS/Spring 2021/Linear Models For Data Science/melbourne-housing")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse)
library(broom) # augment and tidy
library(knitr) # kable
library(lubridate) # Datetime
library(plotly)
library(heatmaply)
library(ggcorrplot)
melbourne <- read.csv("melbourne_cleaned.csv", header=TRUE)
unlink('~/MSDS/Spring 2021/Linear Models For Data Science/Module9-logisticRegression/melbourne-notebook_cache', recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse)
library(broom) # augment and tidy
library(knitr) # kable
library(lubridate) # Datetime
library(plotly)
library(heatmaply)
library(ggcorrplot)
melbourne <- read.csv("melbourne_cleaned.csv", header=TRUE)
melbourne <- read.csv("melbourne_cleaned.csv", header=TRUE)
melbourne <- read.csv("melbourne_cleaned.csv", header=TRUE)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse)
library(broom) # augment and tidy
library(knitr) # kable
library(lubridate) # Datetime
library(plotly)
library(heatmaply)
library(ggcorrplot)
melbourne <- read.csv("melbourne_cleaned.csv", header=TRUE)
# ==============================================================================
# The dataset contains multiple categorical variables, so create a list of them
# and tell R to turn them into a factor
# ==============================================================================
cats <- c('Type', 'Regionname', 'Postcode', 'CouncilArea', 'Suburb')
melbourne[,cats] <- lapply(melbourne[,cats], factor)
# ===============================================================================
# There are multiple date formats in the date column {17/09/2016, 4/03/2017, etc.}
# We can standardize the date formatting with the lubridate package
# ===============================================================================
mdy <- mdy(melbourne$Date)
dmy <- dmy(melbourne$Date)
mdy[is.na(mdy)] <- dmy[is.na(mdy)]
melbourne$Date <- mdy
setwd("~/MSDS/Spring 2021/Linear Models For Data Science/melbourne-housing")
numericVals <- subset(melbourne, select=-c(Suburb, Address, Date, Postcode, CouncilArea, Lattitude, Longtitude, Regionname, Type))
# Compute correlation coefficients
cor.coef <- cor(numericVals)
# Compute correlation p-values
cor.test.p <- function(x){
FUN <- function(x, y) cor.test(x, y)[["p.value"]]
z <- outer(
colnames(x),
colnames(x),
Vectorize(function(i,j) FUN(x[,i], x[,j]))
)
dimnames(z) <- list(colnames(x), colnames(x))
z
}
p <- cor.test.p(numericVals)
heatmaply_cor(
cor.coef,
node_type = "scatter",
point_size_mat = -log(p),
point_size_name = "-log10(p-value)",
label_names = c("x", "y", "Correlation")
)
View(melbourne)
pricingModel <- lm(Price~Rooms+Distance+Postcode+Bathroom+Car+Landsize+BuildingArea+YearBuilt+Regionname+Propertycount, data=melbourne)
summary(pricingModel)
pricingModel <- lm(Price~Rooms+Distance+Bathroom+Car+Landsize+BuildingArea+YearBuilt+Regionname+Propertycount, data=melbourne)
summary(pricingModel)
pricingModel <- lm(log(Price)~Rooms+Distance+Bathroom+Car+log(Landsize)+BuildingArea+YearBuilt+Regionname+Propertycount, data=melbourne)
pricingModel <- lm(log(Price)~log(Landsize)+Rooms+Distance+Bathroom+Car+BuildingArea+YearBuilt+Regionname+Propertycount, data=melbourne)
pricingModel <- lm(log(Price)~Landsize+Rooms+Distance+Bathroom+Car+BuildingArea+YearBuilt+Regionname+Propertycount, data=melbourne)
summary(pricingModel)
pricingModel <- lm(Price~Landsize+Rooms+Distance+Bathroom+Car+BuildingArea+YearBuilt+Regionname+Propertycount, data=melbourne)
summary(pricingModel)
region_classes <- melbourne %>% group_by(Regionname) %>% summarize(mean_price = round(mean(Price),2))
ggplot(clarity_classes, aes(x=Regionname, y=mean_price, fill=Regionname)) +
geom_bar(stat = "identity", width = 0.5) +
geom_text(aes(label = mean_price), hjust = .5,
color = "white",
size = 3) +
theme_classic()
region_classes <- melbourne %>% group_by(Regionname) %>% summarize(mean_price = round(mean(Price),2))
ggplot(region_classes, aes(x=Regionname, y=mean_price, fill=Regionname)) +
geom_bar(stat = "identity", width = 0.5) +
geom_text(aes(label = mean_price), hjust = .5,
color = "white",
size = 3) +
theme_classic()
library(faraway)
VIF(pricingModel)
library(faraway)
vif(pricingModel)
cooksd <- cooks.distance(pricingModel)
plot(cooksd, pch="*", cex=2, main="Influential Obs by Cooks distance")  # plot cook's distance
abline(h = 4*mean(cooksd, na.rm=T), col="red")  # add cutoff line
text(x=1:length(cooksd)+1, y=cooksd, labels=ifelse(cooksd>4*mean(cooksd, na.rm=T),names(cooksd),""), col="red")  # add labels
melbourne <- melbourne[-c(5523)]
melbourne <- melbourne[-c(5523),]
melbourne$Landsize[1816]
melbourne$Landsize[1816] <- 107
melbourne$Landsize[1816]
melbourne$YearBuilt[5376] <- 1960
pricingModelOutlierCorrected <- lm(Price~Landsize+Rooms+Distance+Bathroom+Car+BuildingArea+YearBuilt+Regionname+Propertycount, data=melbourne)
summary(pricingModelOutlierCorrected)
cooksd2 <- cooks.distance(pricingModelOutlierCorrected)
plot(cooksd2, pch="*", cex=2, main="Influential Observations by Cooks distance")  # plot cook's distance
abline(h = 4*mean(cooksd2, na.rm=T), col="red")  # add cutoff line
text(x=1:length(cooksd2)+1, y=cooksd2, labels=ifelse(cooksd2>4*mean(cooksd2, na.rm=T),names(cooksd2),""), col="red")  # add labels
melbourne$Landsize[2652] <- 731
pricingModelOutlierCorrected <- lm(Price~Landsize+Rooms+Distance+Bathroom+Car+BuildingArea+YearBuilt+Regionname+Propertycount, data=melbourne)
summary(pricingModelOutlierCorrected)
cooksd2 <- cooks.distance(pricingModelOutlierCorrected)
plot(cooksd2, pch="*", cex=2, main="Influential Observations by Cooks distance")  # plot cook's distance
abline(h = 4*mean(cooksd2, na.rm=T), col="red")  # add cutoff line
text(x=1:length(cooksd2)+1, y=cooksd2, labels=ifelse(cooksd2>4*mean(cooksd2, na.rm=T),names(cooksd2),""), col="red")  # add labels
melbourne$BuildingArea[2652] <- 731
pricingModelOutlierCorrected <- lm(Price~Landsize+Rooms+Distance+Bathroom+Car+BuildingArea+YearBuilt+Regionname+Propertycount, data=melbourne)
summary(pricingModelOutlierCorrected)
cooksd2 <- cooks.distance(pricingModelOutlierCorrected)
plot(cooksd2, pch="*", cex=2, main="Influential Observations by Cooks distance")  # plot cook's distance
abline(h = 4*mean(cooksd2, na.rm=T), col="red")  # add cutoff line
text(x=1:length(cooksd2)+1, y=cooksd2, labels=ifelse(cooksd2>4*mean(cooksd2, na.rm=T),names(cooksd2),""), col="red")  # add labels
melbourne$BuildingArea[9480] <- 731
melbourne$Landsize[9480] <- 731
pricingModelOutlierCorrected <- lm(Price~Landsize+Rooms+Distance+Bathroom+Car+BuildingArea+YearBuilt+Regionname+Propertycount, data=melbourne)
summary(pricingModelOutlierCorrected)
cooksd2 <- cooks.distance(pricingModelOutlierCorrected)
plot(cooksd2, pch="*", cex=2, main="Influential Observations by Cooks distance")  # plot cook's distance
abline(h = 4*mean(cooksd2, na.rm=T), col="red")  # add cutoff line
text(x=1:length(cooksd2)+1, y=cooksd2, labels=ifelse(cooksd2>4*mean(cooksd2, na.rm=T),names(cooksd2),""), col="red")  # add labels
melbourne <- read.csv("melbourne_cleaned.csv", header=TRUE)
# ==============================================================================
# The dataset contains multiple categorical variables, so create a list of them
# and tell R to turn them into a factor
# ==============================================================================
cats <- c('Type', 'Regionname', 'Postcode', 'CouncilArea', 'Suburb')
melbourne[,cats] <- lapply(melbourne[,cats], factor)
# ===============================================================================
# There are multiple date formats in the date column {17/09/2016, 4/03/2017, etc.}
# We can standardize the date formatting with the lubridate package
# ===============================================================================
mdy <- mdy(melbourne$Date)
dmy <- dmy(melbourne$Date)
mdy[is.na(mdy)] <- dmy[is.na(mdy)]
melbourne$Date <- mdy
numericVals <- subset(melbourne, select=-c(Suburb, Address, Date, Postcode, CouncilArea, Lattitude, Longtitude, Regionname, Type))
# Compute correlation coefficients
cor.coef <- cor(numericVals)
# Compute correlation p-values
cor.test.p <- function(x){
FUN <- function(x, y) cor.test(x, y)[["p.value"]]
z <- outer(
colnames(x),
colnames(x),
Vectorize(function(i,j) FUN(x[,i], x[,j]))
)
dimnames(z) <- list(colnames(x), colnames(x))
z
}
p <- cor.test.p(numericVals)
heatmaply_cor(
cor.coef,
node_type = "scatter",
point_size_mat = -log(p),
point_size_name = "-log10(p-value)",
label_names = c("x", "y", "Correlation")
)
fig <- melbourne
fig <- fig %>%
plot_ly(
type = 'densitymapbox',
lat = ~Lattitude,
lon = ~Longtitude,
coloraxis = 'Price',
radius = 10,
opacity = 0.5,
zoom = 13
)
fig <- fig %>%
layout(
mapbox = list(
style="stamen-terrain",
zoom = 10,
center= list(lat=-37.8, lon=145)),
coloraxis = list(colorscale = "Viridis"))
fig
pl <- plot_ly(y=~melbourne$Price,
type="box")
pl
p <- plot_ly(melbourne, x = ~Regionname, y = ~Price, color = ~Regionname, type = "box")
p <- p %>% layout(boxmode = "group")
p
region_classes <- melbourne %>% group_by(Regionname) %>% summarize(mean_price = round(mean(Price),2))
ggplot(region_classes, aes(x=Regionname, y=mean_price, fill=Regionname)) +
geom_bar(stat = "identity", width = 0.5) +
geom_text(aes(label = mean_price), hjust = .5,
color = "white",
size = 3) +
theme_classic()
t <- plot_ly(melbourne, x = ~Type, y = ~Price, color = ~Type, type = "box")
t <- t %>% layout(boxmode = "group")
t
fig <- plot_ly(y = melbourne$Landsize, type = "box")
fig
fig <- plot_ly(x = ~melbourne$Distance, y = ~melbourne$Price, type = 'box')
fig
pricingModel <- lm(Price~Landsize+Rooms+Distance+Bathroom+Car+BuildingArea+YearBuilt+Regionname+Propertycount, data=melbourne)
summary(pricingModel)
library(faraway)
vif(pricingModel)
cooksd <- cooks.distance(pricingModel)
plot(cooksd, pch="*", cex=2, main="Influential Observations by Cooks distance")  # plot cook's distance
abline(h = 4*mean(cooksd, na.rm=T), col="red")  # add cutoff line
text(x=1:length(cooksd)+1, y=cooksd, labels=ifelse(cooksd>4*mean(cooksd, na.rm=T),names(cooksd),""), col="red")  # add labels
# deleting the ranch thats 50 miles away
melbourne <- melbourne[-c(5523),]
# correcting the land size data entry mistake
melbourne$Landsize[1816] <- 107
# correcting the year built data entry mistake
melbourne$YearBuilt[5376] <- 1960
pricingModelOutlierCorrected <- lm(Price~Landsize+Rooms+Distance+Bathroom+Car+BuildingArea+YearBuilt+Regionname+Propertycount, data=melbourne)
summary(pricingModelOutlierCorrected)
cooksd2 <- cooks.distance(pricingModelOutlierCorrected)
plot(cooksd2, pch="*", cex=2, main="Influential Observations by Cooks distance")  # plot cook's distance
abline(h = 4*mean(cooksd2, na.rm=T), col="red")  # add cutoff line
text(x=1:length(cooksd2)+1, y=cooksd2, labels=ifelse(cooksd2>4*mean(cooksd2, na.rm=T),names(cooksd2),""), col="red")  # add labels
melbourne$BuildingArea[2652] <- 731
pricingModelOutlierCorrected <- lm(Price~Landsize+Rooms+Distance+Bathroom+Car+BuildingArea+YearBuilt+Regionname+Propertycount, data=melbourne)
summary(pricingModelOutlierCorrected)
cooksd2 <- cooks.distance(pricingModelOutlierCorrected)
plot(cooksd2, pch="*", cex=2, main="Influential Observations by Cooks distance")  # plot cook's distance
abline(h = 4*mean(cooksd2, na.rm=T), col="red")  # add cutoff line
text(x=1:length(cooksd2)+1, y=cooksd2, labels=ifelse(cooksd2>4*mean(cooksd2, na.rm=T),names(cooksd2),""), col="red")  # add labels
# have to use index 9481 since there was an instance deleted before this index
melbourne$BuildingArea[9481] <- 731
melbourne$Landsize[9481] <- 731
pricingModelOutlierCorrected <- lm(Price~Landsize+Rooms+Distance+Bathroom+Car+BuildingArea+YearBuilt+Regionname+Propertycount, data=melbourne)
summary(pricingModelOutlierCorrected)
cooksd2 <- cooks.distance(pricingModelOutlierCorrected)
plot(cooksd2, pch="*", cex=2, main="Influential Observations by Cooks distance")  # plot cook's distance
abline(h = 4*mean(cooksd2, na.rm=T), col="red")  # add cutoff line
text(x=1:length(cooksd2)+1, y=cooksd2, labels=ifelse(cooksd2>4*mean(cooksd2, na.rm=T),names(cooksd2),""), col="red")  # add labels
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(tidyverse)
library(broom) # augment and tidy
library(knitr) # kable
library(lubridate) # Datetime
library(plotly)
library(heatmaply)
library(ggcorrplot)
melbourne <- read.csv("melbourne_cleaned.csv", header=TRUE)
# ==============================================================================
# The dataset contains multiple categorical variables, so create a list of them
# and tell R to turn them into a factor
# ==============================================================================
cats <- c('Type', 'Regionname', 'Postcode', 'CouncilArea', 'Suburb')
melbourne[,cats] <- lapply(melbourne[,cats], factor)
# ===============================================================================
# There are multiple date formats in the date column {17/09/2016, 4/03/2017, etc.}
# We can standardize the date formatting with the lubridate package
# ===============================================================================
mdy <- mdy(melbourne$Date)
dmy <- dmy(melbourne$Date)
mdy[is.na(mdy)] <- dmy[is.na(mdy)]
melbourne$Date <- mdy
numericVals <- subset(melbourne, select=-c(Suburb, Address, Date, Postcode, CouncilArea, Lattitude, Longtitude, Regionname, Type))
# Compute correlation coefficients
cor.coef <- cor(numericVals)
# Compute correlation p-values
cor.test.p <- function(x){
FUN <- function(x, y) cor.test(x, y)[["p.value"]]
z <- outer(
colnames(x),
colnames(x),
Vectorize(function(i,j) FUN(x[,i], x[,j]))
)
dimnames(z) <- list(colnames(x), colnames(x))
z
}
p <- cor.test.p(numericVals)
heatmaply_cor(
cor.coef,
node_type = "scatter",
point_size_mat = -log(p),
point_size_name = "-log10(p-value)",
label_names = c("x", "y", "Correlation")
)
fig <- melbourne
fig <- fig %>%
plot_ly(
type = 'densitymapbox',
lat = ~Lattitude,
lon = ~Longtitude,
coloraxis = 'Price',
radius = 10,
opacity = 0.5,
zoom = 13
)
fig <- fig %>%
layout(
mapbox = list(
style="stamen-terrain",
zoom = 10,
center= list(lat=-37.8, lon=145)),
coloraxis = list(colorscale = "Viridis"))
fig
pl <- plot_ly(y=~melbourne$Price,
type="box")
pl
p <- plot_ly(melbourne, x = ~Regionname, y = ~Price, color = ~Regionname, type = "box")
p <- p %>% layout(boxmode = "group")
p
region_classes <- melbourne %>% group_by(Regionname) %>% summarize(mean_price = round(mean(Price),2))
ggplot(region_classes, aes(x=Regionname, y=mean_price, fill=Regionname)) +
geom_bar(stat = "identity", width = 0.5) +
geom_text(aes(label = mean_price), hjust = .5,
color = "white",
size = 3) +
theme_classic()
t <- plot_ly(melbourne, x = ~Type, y = ~Price, color = ~Type, type = "box")
t <- t %>% layout(boxmode = "group")
t
fig <- plot_ly(y = melbourne$Landsize, type = "box")
fig
fig <- plot_ly(x = ~melbourne$Distance, y = ~melbourne$Price, type = 'box')
fig
pricingModel <- lm(Price~Landsize+Rooms+Distance+Bathroom+Car+BuildingArea+YearBuilt+Regionname+Propertycount, data=melbourne)
summary(pricingModel)
library(faraway)
vif(pricingModel)
cooksd <- cooks.distance(pricingModel)
plot(cooksd, pch="*", cex=2, main="Influential Observations by Cooks distance")  # plot cook's distance
abline(h = 4*mean(cooksd, na.rm=T), col="red")  # add cutoff line
text(x=1:length(cooksd)+1, y=cooksd, labels=ifelse(cooksd>4*mean(cooksd, na.rm=T),names(cooksd),""), col="red")  # add labels
# deleting the ranch thats 50 miles away
melbourne <- melbourne[-c(5523),]
# correcting the land size data entry mistake
melbourne$Landsize[1816] <- 107
# correcting the year built data entry mistake
melbourne$YearBuilt[5376] <- 1960
pricingModelOutlierCorrected <- lm(Price~Landsize+Rooms+Distance+Bathroom+Car+BuildingArea+YearBuilt+Regionname+Propertycount, data=melbourne)
summary(pricingModelOutlierCorrected)
cooksd2 <- cooks.distance(pricingModelOutlierCorrected)
plot(cooksd2, pch="*", cex=2, main="Influential Observations by Cooks distance")  # plot cook's distance
abline(h = 4*mean(cooksd2, na.rm=T), col="red")  # add cutoff line
text(x=1:length(cooksd2)+1, y=cooksd2, labels=ifelse(cooksd2>4*mean(cooksd2, na.rm=T),names(cooksd2),""), col="red")  # add labels
melbourne$BuildingArea[2652] <- 731
pricingModelOutlierCorrected <- lm(Price~Landsize+Rooms+Distance+Bathroom+Car+BuildingArea+YearBuilt+Regionname+Propertycount, data=melbourne)
summary(pricingModelOutlierCorrected)
cooksd2 <- cooks.distance(pricingModelOutlierCorrected)
plot(cooksd2, pch="*", cex=2, main="Influential Observations by Cooks distance")  # plot cook's distance
abline(h = 4*mean(cooksd2, na.rm=T), col="red")  # add cutoff line
text(x=1:length(cooksd2)+1, y=cooksd2, labels=ifelse(cooksd2>4*mean(cooksd2, na.rm=T),names(cooksd2),""), col="red")  # add labels
# have to use index 9479 since there was an instance deleted before this index
melbourne$BuildingArea[9479] <- 731
melbourne$Landsize[9479] <- 731
pricingModelOutlierCorrected <- lm(Price~Landsize+Rooms+Distance+Bathroom+Car+BuildingArea+YearBuilt+Regionname+Propertycount, data=melbourne)
summary(pricingModelOutlierCorrected)
cooksd2 <- cooks.distance(pricingModelOutlierCorrected)
plot(cooksd2, pch="*", cex=2, main="Influential Observations by Cooks distance")  # plot cook's distance
abline(h = 4*mean(cooksd2, na.rm=T), col="red")  # add cutoff line
text(x=1:length(cooksd2)+1, y=cooksd2, labels=ifelse(cooksd2>4*mean(cooksd2, na.rm=T),names(cooksd2),""), col="red")  # add labels
melbourne <- read.csv("melbourne_cleaned.csv", header=TRUE)
# ==============================================================================
# The dataset contains multiple categorical variables, so create a list of them
# and tell R to turn them into a factor
# ==============================================================================
cats <- c('Type', 'Regionname', 'Postcode', 'CouncilArea', 'Suburb')
melbourne[,cats] <- lapply(melbourne[,cats], factor)
# ===============================================================================
# There are multiple date formats in the date column {17/09/2016, 4/03/2017, etc.}
# We can standardize the date formatting with the lubridate package
# ===============================================================================
mdy <- mdy(melbourne$Date)
dmy <- dmy(melbourne$Date)
mdy[is.na(mdy)] <- dmy[is.na(mdy)]
melbourne$Date <- mdy
numericVals <- subset(melbourne, select=-c(Suburb, Address, Date, Postcode, CouncilArea, Lattitude, Longtitude, Regionname, Type))
# Compute correlation coefficients
cor.coef <- cor(numericVals)
# Compute correlation p-values
cor.test.p <- function(x){
FUN <- function(x, y) cor.test(x, y)[["p.value"]]
z <- outer(
colnames(x),
colnames(x),
Vectorize(function(i,j) FUN(x[,i], x[,j]))
)
dimnames(z) <- list(colnames(x), colnames(x))
z
}
p <- cor.test.p(numericVals)
heatmaply_cor(
cor.coef,
node_type = "scatter",
point_size_mat = -log(p),
point_size_name = "-log10(p-value)",
label_names = c("x", "y", "Correlation")
)
fig <- melbourne
fig <- fig %>%
plot_ly(
type = 'densitymapbox',
lat = ~Lattitude,
lon = ~Longtitude,
coloraxis = 'Price',
radius = 10,
opacity = 0.5,
zoom = 13
)
fig <- fig %>%
layout(
mapbox = list(
style="stamen-terrain",
zoom = 10,
center= list(lat=-37.8, lon=145)),
coloraxis = list(colorscale = "Viridis"))
fig
pl <- plot_ly(y=~melbourne$Price,
type="box")
pl
p <- plot_ly(melbourne, x = ~Regionname, y = ~Price, color = ~Regionname, type = "box")
p <- p %>% layout(boxmode = "group")
p
region_classes <- melbourne %>% group_by(Regionname) %>% summarize(mean_price = round(mean(Price),2))
ggplot(region_classes, aes(x=Regionname, y=mean_price, fill=Regionname)) +
geom_bar(stat = "identity", width = 0.5) +
geom_text(aes(label = mean_price), hjust = .5,
color = "white",
size = 3) +
theme_classic()
t <- plot_ly(melbourne, x = ~Type, y = ~Price, color = ~Type, type = "box")
t <- t %>% layout(boxmode = "group")
t
fig <- plot_ly(y = melbourne$Landsize, type = "box")
fig
fig <- plot_ly(x = ~melbourne$Distance, y = ~melbourne$Price, type = 'box')
fig
pricingModel <- lm(Price~Landsize+Rooms+Distance+Bathroom+Car+BuildingArea+YearBuilt+Regionname+Propertycount, data=melbourne)
summary(pricingModel)
library(faraway)
vif(pricingModel)
cooksd <- cooks.distance(pricingModel)
plot(cooksd, pch="*", cex=2, main="Influential Observations by Cooks distance")  # plot cook's distance
abline(h = 4*mean(cooksd, na.rm=T), col="red")  # add cutoff line
text(x=1:length(cooksd)+1, y=cooksd, labels=ifelse(cooksd>4*mean(cooksd, na.rm=T),names(cooksd),""), col="red")  # add labels
# deleting the ranch thats 50 miles away
melbourne <- melbourne[-c(5523),]
# correcting the land size data entry mistake
melbourne$Landsize[1816] <- 107
# correcting the year built data entry mistake
melbourne$YearBuilt[5376] <- 1960
pricingModelOutlierCorrected <- lm(Price~Landsize+Rooms+Distance+Bathroom+Car+BuildingArea+YearBuilt+Regionname+Propertycount, data=melbourne)
summary(pricingModelOutlierCorrected)
cooksd2 <- cooks.distance(pricingModelOutlierCorrected)
plot(cooksd2, pch="*", cex=2, main="Influential Observations by Cooks distance")  # plot cook's distance
abline(h = 4*mean(cooksd2, na.rm=T), col="red")  # add cutoff line
text(x=1:length(cooksd2)+1, y=cooksd2, labels=ifelse(cooksd2>4*mean(cooksd2, na.rm=T),names(cooksd2),""), col="red")  # add labels
melbourne$BuildingArea[2652] <- 731
pricingModelOutlierCorrected <- lm(Price~Landsize+Rooms+Distance+Bathroom+Car+BuildingArea+YearBuilt+Regionname+Propertycount, data=melbourne)
summary(pricingModelOutlierCorrected)
cooksd2 <- cooks.distance(pricingModelOutlierCorrected)
plot(cooksd2, pch="*", cex=2, main="Influential Observations by Cooks distance")  # plot cook's distance
abline(h = 4*mean(cooksd2, na.rm=T), col="red")  # add cutoff line
text(x=1:length(cooksd2)+1, y=cooksd2, labels=ifelse(cooksd2>4*mean(cooksd2, na.rm=T),names(cooksd2),""), col="red")  # add labels
# have to use index 9479 since there was an instance deleted before this index
melbourne$BuildingArea[2847] <- 311
melbourne$BuildingArea[9479] <- 731
melbourne$Landsize[9479] <- 731
pricingModelOutlierCorrected <- lm(Price~Landsize+Rooms+Distance+Bathroom+Car+BuildingArea+YearBuilt+Regionname+Propertycount, data=melbourne)
summary(pricingModelOutlierCorrected)
cooksd2 <- cooks.distance(pricingModelOutlierCorrected)
plot(cooksd2, pch="*", cex=2, main="Influential Observations by Cooks distance")  # plot cook's distance
abline(h = 4*mean(cooksd2, na.rm=T), col="red")  # add cutoff line
text(x=1:length(cooksd2)+1, y=cooksd2, labels=ifelse(cooksd2>4*mean(cooksd2, na.rm=T),names(cooksd2),""), col="red")  # add labels
melbourne$BuildingArea[11678] <- 92.9
melbourne$BuildingArea <- ifelse(melbourne$BuildingArea>1000, melbourne$BuildingArea/100, melbourne$BuildingArea)
pricingModelOutlierCorrected <- lm(Price~Landsize+Rooms+Distance+Bathroom+Car+BuildingArea+YearBuilt+Regionname+Propertycount, data=melbourne)
summary(pricingModelOutlierCorrected)
cooksd2 <- cooks.distance(pricingModelOutlierCorrected)
plot(cooksd2, pch="*", cex=2, main="Influential Observations by Cooks distance")  # plot cook's distance
abline(h = 4*mean(cooksd2, na.rm=T), col="red")  # add cutoff line
text(x=1:length(cooksd2)+1, y=cooksd2, labels=ifelse(cooksd2>4*mean(cooksd2, na.rm=T),names(cooksd2),""), col="red")  # add labels
melbourne$YearBuilt<-round(as.numeric(melbourne$YearBuilt), 0)
pricingModelOutlierCorrected <- lm(Price~Landsize+Rooms+Distance+Bathroom+Car+BuildingArea+YearBuilt+Regionname+Propertycount, data=melbourne)
summary(pricingModelOutlierCorrected)
cooksd2 <- cooks.distance(pricingModelOutlierCorrected)
plot(cooksd2, pch="*", cex=2, main="Influential Observations by Cooks distance")  # plot cook's distance
abline(h = 4*mean(cooksd2, na.rm=T), col="red")  # add cutoff line
text(x=1:length(cooksd2)+1, y=cooksd2, labels=ifelse(cooksd2>4*mean(cooksd2, na.rm=T),names(cooksd2),""), col="red")  # add labels
fig <- plot_ly(y = melbourne$Landsize, type = "box")
fig
fig <- plot_ly(y = melbourne$BuildingArea, type = "box")
fig
